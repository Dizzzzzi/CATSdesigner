/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
var MatFileUploadComponent = /** @class */ (function () {
    function MatFileUploadComponent() {
        this.labelText = 'Select File(s)';
        this.selectButtonText = 'Select File(s)';
        this.selectFilesButtonType = 'button';
        this.uploadButtonText = 'Upload File(s)';
        this.uploadButtonType = 'button';
        this.allowMultipleFiles = false;
        this.showUploadButton = true;
        this.acceptedTypes = '*.*';
        this.customSvgIcon = null;
        this.uploadClicked = new EventEmitter();
        this.selectedFilesChanged = new EventEmitter();
        this.selectedFileText = '';
    }
    /**
     * @param {?=} files
     * @return {?}
     */
    MatFileUploadComponent.prototype.filesChanged = /**
     * @param {?=} files
     * @return {?}
     */
    function (files) {
        this.selectedFiles = files;
        this.selectedFilesChanged.emit(this.selectedFiles);
        if (this.selectedFiles) {
            /** @type {?} */
            var numSelectedFiles = this.selectedFiles.length;
            this.selectedFileText =
                numSelectedFiles === 1
                    ? this.selectedFiles[0].name
                    : numSelectedFiles + " files selected";
        }
        else {
            this.selectedFileText = '';
            this.resetFileInput();
        }
    };
    /**
     * @return {?}
     */
    MatFileUploadComponent.prototype.uploadFiles = /**
     * @return {?}
     */
    function () {
        this.uploadClicked.emit(this.selectedFiles);
        this.resetFileInput();
    };
    /**
     * @return {?}
     */
    MatFileUploadComponent.prototype.resetFileInput = /**
     * @return {?}
     */
    function () {
        this.fileInputRef.nativeElement.value = '';
    };
    MatFileUploadComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-file-upload',
                    template: "\n    <span class=\"file-input-text\">{{ labelText }}</span>\n    <button\n      mat-button\n      [type]=\"selectFilesButtonType\"\n      color=\"primary\"\n      class=\"file-input-button\"\n      (click)=\"fileInput.click()\"\n      [attr.aria-label]=\"selectButtonText\"\n    >\n      <span>{{ selectButtonText }}</span>\n      <input\n        #fileInput\n        type=\"file\"\n        style=\"display: none\"\n        [accept]=\"acceptedTypes\"\n        [multiple]=\"allowMultipleFiles\"\n        (change)=\"filesChanged($event.target.files)\"\n      />\n    </button>\n    <button\n      mat-raised-button\n      [type]=\"uploadButtonType\"\n      color=\"primary\"\n      class=\"file-input-button\"\n      [disabled]=\"!selectedFiles\"\n      (click)=\"uploadFiles()\"\n      *ngIf=\"showUploadButton\"\n      [attr.aria-label]=\"uploadButtonText\"\n    >\n      {{ uploadButtonText }}\n    </button>\n    <span class=\"file-input-text\">{{ selectedFileText }}</span>\n    <button\n      mat-icon-button\n      (click)=\"filesChanged(null)\"\n      type=\"button\"\n      aria-label=\"Remove Selected File(s)\"\n    >\n      <ng-container *ngIf=\"selectedFiles != null && selectedFiles.length > 0\">\n        <mat-icon *ngIf=\"!customSvgIcon\">close</mat-icon>\n        <mat-icon *ngIf=\"customSvgIcon\" [svgIcon]=\"customSvgIcon\"></mat-icon>\n      </ng-container>\n    </button>\n  ",
                    styles: ['.file-input-button { margin-right: 8px !important }',
                        '.file-input-text { font-size: 14px !important; margin-right: 8px !important }']
                }] }
    ];
    MatFileUploadComponent.propDecorators = {
        labelText: [{ type: Input }],
        selectButtonText: [{ type: Input }],
        selectFilesButtonType: [{ type: Input }],
        uploadButtonText: [{ type: Input }],
        uploadButtonType: [{ type: Input }],
        allowMultipleFiles: [{ type: Input }],
        showUploadButton: [{ type: Input }],
        acceptedTypes: [{ type: Input }],
        customSvgIcon: [{ type: Input }],
        uploadClicked: [{ type: Output }],
        selectedFilesChanged: [{ type: Output }],
        fileInputRef: [{ type: ViewChild, args: ['fileInput', { static: false },] }]
    };
    return MatFileUploadComponent;
}());
export { MatFileUploadComponent };
if (false) {
    /** @type {?} */
    MatFileUploadComponent.prototype.labelText;
    /** @type {?} */
    MatFileUploadComponent.prototype.selectButtonText;
    /** @type {?} */
    MatFileUploadComponent.prototype.selectFilesButtonType;
    /** @type {?} */
    MatFileUploadComponent.prototype.uploadButtonText;
    /** @type {?} */
    MatFileUploadComponent.prototype.uploadButtonType;
    /** @type {?} */
    MatFileUploadComponent.prototype.allowMultipleFiles;
    /** @type {?} */
    MatFileUploadComponent.prototype.showUploadButton;
    /** @type {?} */
    MatFileUploadComponent.prototype.acceptedTypes;
    /** @type {?} */
    MatFileUploadComponent.prototype.customSvgIcon;
    /** @type {?} */
    MatFileUploadComponent.prototype.uploadClicked;
    /** @type {?} */
    MatFileUploadComponent.prototype.selectedFilesChanged;
    /** @type {?} */
    MatFileUploadComponent.prototype.fileInputRef;
    /** @type {?} */
    MatFileUploadComponent.prototype.selectedFiles;
    /** @type {?} */
    MatFileUploadComponent.prototype.selectedFileText;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LWZpbGUtdXBsb2FkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdC1maWxlLXVwbG9hZC8iLCJzb3VyY2VzIjpbImxpYi9tYXQtZmlsZS11cGxvYWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFDTixTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUE7QUFFdEI7SUFBQTtRQXFEVyxjQUFTLEdBQUcsZ0JBQWdCLENBQUM7UUFDN0IscUJBQWdCLEdBQUcsZ0JBQWdCLENBQUM7UUFDcEMsMEJBQXFCLEdBQTJDLFFBQVEsQ0FBQztRQUN6RSxxQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUNwQyxxQkFBZ0IsR0FBMkMsUUFBUSxDQUFDO1FBQ3BFLHVCQUFrQixHQUFHLEtBQUssQ0FBQztRQUMzQixxQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFDeEIsa0JBQWEsR0FBRyxLQUFLLENBQUM7UUFDdEIsa0JBQWEsR0FBWSxJQUFJLENBQUM7UUFDN0Isa0JBQWEsR0FBMkIsSUFBSSxZQUFZLEVBQVksQ0FBQztRQUNyRSx5QkFBb0IsR0FBMkIsSUFBSSxZQUFZLEVBQVksQ0FBQztRQUl0RixxQkFBZ0IsR0FBRyxFQUFFLENBQUM7SUF5QnhCLENBQUM7Ozs7O0lBdkJDLDZDQUFZOzs7O0lBQVosVUFBYSxLQUFnQjtRQUMzQixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQTtRQUMxQixJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQTtRQUNsRCxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7O2dCQUNoQixnQkFBZ0IsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU07WUFDbEQsSUFBSSxDQUFDLGdCQUFnQjtnQkFDbkIsZ0JBQWdCLEtBQUssQ0FBQztvQkFDcEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSTtvQkFDNUIsQ0FBQyxDQUFJLGdCQUFnQixvQkFBaUIsQ0FBQTtTQUMzQzthQUFNO1lBQ0wsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQTtZQUMxQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUE7U0FDdEI7SUFDSCxDQUFDOzs7O0lBRUQsNENBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBQzNDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQTtJQUN2QixDQUFDOzs7O0lBRUQsK0NBQWM7OztJQUFkO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQTtJQUM1QyxDQUFDOztnQkEzRkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLFFBQVEsRUFBRSxvM0NBNENUOzZCQUVDLHFEQUFxRDt3QkFDckQsK0VBQStFO2lCQUVsRjs7OzRCQUVFLEtBQUs7bUNBQ0wsS0FBSzt3Q0FDTCxLQUFLO21DQUNMLEtBQUs7bUNBQ0wsS0FBSztxQ0FDTCxLQUFLO21DQUNMLEtBQUs7Z0NBQ0wsS0FBSztnQ0FDTCxLQUFLO2dDQUNMLE1BQU07dUNBQ04sTUFBTTsrQkFFTixTQUFTLFNBQUMsV0FBVyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTs7SUEyQjNDLDZCQUFDO0NBQUEsQUE1RkQsSUE0RkM7U0F4Q1ksc0JBQXNCOzs7SUFDakMsMkNBQXNDOztJQUN0QyxrREFBNkM7O0lBQzdDLHVEQUFrRjs7SUFDbEYsa0RBQTZDOztJQUM3QyxrREFBNkU7O0lBQzdFLG9EQUFvQzs7SUFDcEMsa0RBQWlDOztJQUNqQywrQ0FBK0I7O0lBQy9CLCtDQUF1Qzs7SUFDdkMsK0NBQStFOztJQUMvRSxzREFBc0Y7O0lBRXRGLDhDQUFtRTs7SUFDbkUsK0NBQXdCOztJQUN4QixrREFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBvbmVudCxcclxuICBFbGVtZW50UmVmLFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBJbnB1dCxcclxuICBPdXRwdXQsXHJcbiAgVmlld0NoaWxkLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ21hdC1maWxlLXVwbG9hZCcsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxzcGFuIGNsYXNzPVwiZmlsZS1pbnB1dC10ZXh0XCI+e3sgbGFiZWxUZXh0IH19PC9zcGFuPlxyXG4gICAgPGJ1dHRvblxyXG4gICAgICBtYXQtYnV0dG9uXHJcbiAgICAgIFt0eXBlXT1cInNlbGVjdEZpbGVzQnV0dG9uVHlwZVwiXHJcbiAgICAgIGNvbG9yPVwicHJpbWFyeVwiXHJcbiAgICAgIGNsYXNzPVwiZmlsZS1pbnB1dC1idXR0b25cIlxyXG4gICAgICAoY2xpY2spPVwiZmlsZUlucHV0LmNsaWNrKClcIlxyXG4gICAgICBbYXR0ci5hcmlhLWxhYmVsXT1cInNlbGVjdEJ1dHRvblRleHRcIlxyXG4gICAgPlxyXG4gICAgICA8c3Bhbj57eyBzZWxlY3RCdXR0b25UZXh0IH19PC9zcGFuPlxyXG4gICAgICA8aW5wdXRcclxuICAgICAgICAjZmlsZUlucHV0XHJcbiAgICAgICAgdHlwZT1cImZpbGVcIlxyXG4gICAgICAgIHN0eWxlPVwiZGlzcGxheTogbm9uZVwiXHJcbiAgICAgICAgW2FjY2VwdF09XCJhY2NlcHRlZFR5cGVzXCJcclxuICAgICAgICBbbXVsdGlwbGVdPVwiYWxsb3dNdWx0aXBsZUZpbGVzXCJcclxuICAgICAgICAoY2hhbmdlKT1cImZpbGVzQ2hhbmdlZCgkZXZlbnQudGFyZ2V0LmZpbGVzKVwiXHJcbiAgICAgIC8+XHJcbiAgICA8L2J1dHRvbj5cclxuICAgIDxidXR0b25cclxuICAgICAgbWF0LXJhaXNlZC1idXR0b25cclxuICAgICAgW3R5cGVdPVwidXBsb2FkQnV0dG9uVHlwZVwiXHJcbiAgICAgIGNvbG9yPVwicHJpbWFyeVwiXHJcbiAgICAgIGNsYXNzPVwiZmlsZS1pbnB1dC1idXR0b25cIlxyXG4gICAgICBbZGlzYWJsZWRdPVwiIXNlbGVjdGVkRmlsZXNcIlxyXG4gICAgICAoY2xpY2spPVwidXBsb2FkRmlsZXMoKVwiXHJcbiAgICAgICpuZ0lmPVwic2hvd1VwbG9hZEJ1dHRvblwiXHJcbiAgICAgIFthdHRyLmFyaWEtbGFiZWxdPVwidXBsb2FkQnV0dG9uVGV4dFwiXHJcbiAgICA+XHJcbiAgICAgIHt7IHVwbG9hZEJ1dHRvblRleHQgfX1cclxuICAgIDwvYnV0dG9uPlxyXG4gICAgPHNwYW4gY2xhc3M9XCJmaWxlLWlucHV0LXRleHRcIj57eyBzZWxlY3RlZEZpbGVUZXh0IH19PC9zcGFuPlxyXG4gICAgPGJ1dHRvblxyXG4gICAgICBtYXQtaWNvbi1idXR0b25cclxuICAgICAgKGNsaWNrKT1cImZpbGVzQ2hhbmdlZChudWxsKVwiXHJcbiAgICAgIHR5cGU9XCJidXR0b25cIlxyXG4gICAgICBhcmlhLWxhYmVsPVwiUmVtb3ZlIFNlbGVjdGVkIEZpbGUocylcIlxyXG4gICAgPlxyXG4gICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwic2VsZWN0ZWRGaWxlcyAhPSBudWxsICYmIHNlbGVjdGVkRmlsZXMubGVuZ3RoID4gMFwiPlxyXG4gICAgICAgIDxtYXQtaWNvbiAqbmdJZj1cIiFjdXN0b21TdmdJY29uXCI+Y2xvc2U8L21hdC1pY29uPlxyXG4gICAgICAgIDxtYXQtaWNvbiAqbmdJZj1cImN1c3RvbVN2Z0ljb25cIiBbc3ZnSWNvbl09XCJjdXN0b21TdmdJY29uXCI+PC9tYXQtaWNvbj5cclxuICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICA8L2J1dHRvbj5cclxuICBgLFxyXG4gIHN0eWxlczogW1xyXG4gICAgJy5maWxlLWlucHV0LWJ1dHRvbiB7IG1hcmdpbi1yaWdodDogOHB4ICFpbXBvcnRhbnQgfScsXHJcbiAgICAnLmZpbGUtaW5wdXQtdGV4dCB7IGZvbnQtc2l6ZTogMTRweCAhaW1wb3J0YW50OyBtYXJnaW4tcmlnaHQ6IDhweCAhaW1wb3J0YW50IH0nLFxyXG4gIF0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBNYXRGaWxlVXBsb2FkQ29tcG9uZW50IHtcclxuICBASW5wdXQoKSBsYWJlbFRleHQgPSAnU2VsZWN0IEZpbGUocyknO1xyXG4gIEBJbnB1dCgpIHNlbGVjdEJ1dHRvblRleHQgPSAnU2VsZWN0IEZpbGUocyknO1xyXG4gIEBJbnB1dCgpIHNlbGVjdEZpbGVzQnV0dG9uVHlwZTogJ2J1dHRvbicgfCAnbWVudScgfCAncmVzZXQnIHwgJ3N1Ym1pdCcgPSAnYnV0dG9uJztcclxuICBASW5wdXQoKSB1cGxvYWRCdXR0b25UZXh0ID0gJ1VwbG9hZCBGaWxlKHMpJztcclxuICBASW5wdXQoKSB1cGxvYWRCdXR0b25UeXBlOiAnYnV0dG9uJyB8ICdtZW51JyB8ICdyZXNldCcgfCAnc3VibWl0JyA9ICdidXR0b24nO1xyXG4gIEBJbnB1dCgpIGFsbG93TXVsdGlwbGVGaWxlcyA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpIHNob3dVcGxvYWRCdXR0b24gPSB0cnVlO1xyXG4gIEBJbnB1dCgpIGFjY2VwdGVkVHlwZXMgPSAnKi4qJztcclxuICBASW5wdXQoKSBjdXN0b21TdmdJY29uPzogc3RyaW5nID0gbnVsbDtcclxuICBAT3V0cHV0KCkgdXBsb2FkQ2xpY2tlZDogRXZlbnRFbWl0dGVyPEZpbGVMaXN0PiA9IG5ldyBFdmVudEVtaXR0ZXI8RmlsZUxpc3Q+KCk7XHJcbiAgQE91dHB1dCgpIHNlbGVjdGVkRmlsZXNDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8RmlsZUxpc3Q+ID0gbmV3IEV2ZW50RW1pdHRlcjxGaWxlTGlzdD4oKTtcclxuXHJcbiAgQFZpZXdDaGlsZCgnZmlsZUlucHV0JywgeyBzdGF0aWM6IGZhbHNlIH0pIGZpbGVJbnB1dFJlZjogRWxlbWVudFJlZlxyXG4gIHNlbGVjdGVkRmlsZXM6IEZpbGVMaXN0O1xyXG4gIHNlbGVjdGVkRmlsZVRleHQgPSAnJztcclxuXHJcbiAgZmlsZXNDaGFuZ2VkKGZpbGVzPzogRmlsZUxpc3QpOiB2b2lkIHtcclxuICAgIHRoaXMuc2VsZWN0ZWRGaWxlcyA9IGZpbGVzXHJcbiAgICB0aGlzLnNlbGVjdGVkRmlsZXNDaGFuZ2VkLmVtaXQodGhpcy5zZWxlY3RlZEZpbGVzKVxyXG4gICAgaWYgKHRoaXMuc2VsZWN0ZWRGaWxlcykge1xyXG4gICAgICBjb25zdCBudW1TZWxlY3RlZEZpbGVzID0gdGhpcy5zZWxlY3RlZEZpbGVzLmxlbmd0aFxyXG4gICAgICB0aGlzLnNlbGVjdGVkRmlsZVRleHQgPVxyXG4gICAgICAgIG51bVNlbGVjdGVkRmlsZXMgPT09IDFcclxuICAgICAgICAgID8gdGhpcy5zZWxlY3RlZEZpbGVzWzBdLm5hbWVcclxuICAgICAgICAgIDogYCR7bnVtU2VsZWN0ZWRGaWxlc30gZmlsZXMgc2VsZWN0ZWRgXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNlbGVjdGVkRmlsZVRleHQgPSAnJ1xyXG4gICAgICB0aGlzLnJlc2V0RmlsZUlucHV0KClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwbG9hZEZpbGVzKCk6IHZvaWQge1xyXG4gICAgdGhpcy51cGxvYWRDbGlja2VkLmVtaXQodGhpcy5zZWxlY3RlZEZpbGVzKVxyXG4gICAgdGhpcy5yZXNldEZpbGVJbnB1dCgpXHJcbiAgfVxyXG5cclxuICByZXNldEZpbGVJbnB1dCgpOiB2b2lkIHtcclxuICAgIHRoaXMuZmlsZUlucHV0UmVmLm5hdGl2ZUVsZW1lbnQudmFsdWUgPSAnJ1xyXG4gIH1cclxufVxyXG4iXX0=